#!/usr/bin/env python3
"""Deploy montagu

Usage:
  setup-barman [--no-verify]

Options:
  --no-verify   Set up configuration files only, don't connect to server
"""
import docopt
import glob
import json
import os
import os.path
import string
import subprocess
from subprocess import PIPE


def setup(verify=False):
    files = glob.glob("/etc/barman.d.in/*.json")
    conf = [read_barman_conf(x) for x in files]
    for x in conf:
        write_barman_conf(x)
    write_pgpass(conf)
    return conf


def verify(conf):
    for x in conf:
        test_connections(x)
    initial_backup(conf)
    setup_cron(conf)


def write_pgpass(dat):
    template = "{host}:{port}:{dbname}:{user_backup}:{pass_backup}\n" \
               "{host}:{port}:*:{user_stream}:{pass_stream}\n"
    contents = ''.join([template.format(**x) for x in dat])
    pgpass = os.path.expanduser("~/.pgpass")
    with open(pgpass, 'w') as f:
        f.write(contents)
    os.chmod(pgpass, 0o600)


def read_barman_conf(path):
    dat = read_json(path)
    dat['configuration_name'] = basename_no_ext(path)
    prefix = "BARMAN_{}_".format(dat['configuration_name'].upper())
    repl = filter_dict(os.environ, prefix)
    for k, v in repl.items():
        k = k.lstrip(prefix).lower()
        if k not in dat:
            raise KeyError("Invalid environment key '{}'".format(k))
        dat[k] = v
    return dat


def write_barman_conf(dat):
    dest = '/etc/barman.d/{}.conf'.format(dat['configuration_name'])
    conf = read_template().substitute(dat)
    dir_create(os.path.dirname(dest))
    with open(dest, 'w') as f:
        f.write(conf)


def read_template():
    with open('/etc/barman.d.in/template', 'r') as f:
        return string.Template(f.read())


def read_json(path):
    with open(path, 'r') as f:
        return json.load(f)


def basename_no_ext(path):
    return os.path.splitext(os.path.basename(path))[0]


def filter_dict(d, prefix):
    return {k: v for k, v in d.items() if k.startswith(prefix)}


def dir_create(path):
    if not os.path.exists(path):
        os.makedirs(path)


def test_connections(dat):
    args1 = ["psql", "-h", dat['host'], "-p", str(dat['port']), "-w",
             "-U", dat['user_backup'], "-d", dat['dbname'],
             "-c", "SELECT version()"]
    args2 = ["psql", "-h", dat['host'], "-p", str(dat['port']), "-w",
             "-U", dat['user_stream'],
             "-c", "IDENTIFY_SYSTEM", "replication=1"]
    print("Testing connection for {}".format(dat['configuration_name']),
          flush=True)
    print("...Checking backup user", flush=True)
    r1 = subprocess.run(args1, check=True)
    print("...Checking replication user", flush=True)
    r2 = subprocess.run(args2, check=True)


def initial_backup(conf):
    print("Running 'barman cron'", flush=True)
    subprocess.run(["barman", "cron"], check=True)
    for x in conf:
        nm = x['configuration_name']
        force_archive(nm)
        print("Running initial backup of {}".format(nm), flush=True)
        subprocess.run(["barman", "backup", nm], check=True)
        print("Checking barman status of {}".format(nm), flush=True)
        subprocess.run(["barman", "check", nm], check=True)


def setup_cron(conf):
    print("Setting up cron jobs", flush=True)
    if len(conf) > 1:
        raise Exception("This needs work to support > 1 db")
    cron = """
* * * * * root barman cron
0 6 * * * root update-nightly {}
""".lstrip().format(conf[0]["configuration_name"])
    with open("/etc/cron.d/barman", 'w') as f:
        f.write(cron)


# This seems a bit flakey to archive but usually runs just fine the
# second time.  So this is set up within a set of retries
def force_archive(name, attempts=5):
    args = ["barman", "switch-xlog", "--force", "--archive", name]
    for i in range(attempts):
        print("Trying to force server to send a WAL file (attempt {}/{})".
              format(i + 1, attempts),
              flush=True)
        res = subprocess.run(args)
        if res.returncode == 0:
            print("Success!", flush=True)
            return
    raise Exception("Failed to start log archiving for {}".format(name))


if __name__ == "__main__":
    args = docopt.docopt(__doc__)
    conf = setup()
    if not args["--no-verify"]:
        verify(conf)
